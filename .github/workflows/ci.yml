name: CI Pipeline

# Note: This is a CI-only pipeline for testing and code quality
# Deployment will be configured separately when needed

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  EXPO_VERSION: 'latest'

jobs:
  # Code Quality & Linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run TypeScript type checking
      run: npm run type-check

    - name: Check code formatting
      run: npx prettier --check "**/*.{ts,tsx,js,jsx,json,md}"

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: npm test -- --coverage --watchAll=false --passWithNoTests

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: mobile
        name: mobile-coverage

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run npm audit
      run: npm audit --audit-level=moderate

  # Bundle Analysis
  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install EAS CLI
      run: npm install -g @expo/eas-cli

    - name: Setup Expo
      uses: expo/expo-github-action@v8
      with:
        expo-version: ${{ env.EXPO_VERSION }}
        token: ${{ secrets.EXPO_TOKEN }}

    - name: Analyze bundle size
      run: |
        npx expo export --platform web
        npx bundle-analyzer dist/bundles/*.js --mode static --report

    - name: Upload bundle analysis report
      uses: actions/upload-artifact@v4
      with:
        name: bundle-analysis-report
        path: bundle-analysis-report.html

  # Performance Test
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install EAS CLI
      run: npm install -g @expo/eas-cli

    - name: Setup Expo
      uses: expo/expo-github-action@v8
      with:
        expo-version: ${{ env.EXPO_VERSION }}
        token: ${{ secrets.EXPO_TOKEN }}

    - name: Export for web
      run: npx expo export --platform web

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # Notify on completion
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, security-scan]
    if: always()
    permissions:
      contents: read
      actions: read

    steps:
    - name: Notify on success
      if: needs.code-quality.result == 'success' && needs.unit-tests.result == 'success' && needs.security-scan.result == 'success'
      run: |
        echo "‚úÖ All tests passed successfully!"
        echo "üì± Mobile app build completed!"

    - name: Notify on failure
      if: needs.code-quality.result == 'failure' || needs.unit-tests.result == 'failure' || needs.security-scan.result == 'failure'
      run: |
        echo "‚ùå Some tests failed!"
        echo "Please check the logs for details."

    # Add Slack/Discord notification here if needed
    # - name: Notify Slack
    #   uses: 8398a7/action-slack@v3
    #   with:
    #     status: ${{ job.status }}
    #     channel: '#mobile-dev'
    #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}
